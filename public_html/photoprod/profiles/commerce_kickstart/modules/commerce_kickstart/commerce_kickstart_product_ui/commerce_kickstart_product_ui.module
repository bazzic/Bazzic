<?php
/**
 * @file
 * Code for the Demo Store Content architecture feature.
 */

include_once 'commerce_kickstart_product_ui.features.inc';

/**
 * Implements hook_entity_info_alter().
 *
 * Create new view mode for product display, commerce product.
 */
function commerce_kickstart_product_ui_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['product_list'] = array(
    'label' => t('Product list'),
    'custom settings' => TRUE,
  );
  $entity_info['commerce_product']['view modes']['node_product_list'] = array(
    'label' => t('Node: Product list'),
    'custom settings' => TRUE,
  );
  $entity_info['commerce_product']['view modes']['product_in_cart'] = array(
    'label' => t('Product in cart'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_theme().
 */
function commerce_kickstart_product_ui_theme(&$existing) {
  $themes = array(
    'node__product__type' => array(
      'path' => drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme',
      'template' => 'node--product--type',
    ),
    'node__product__type__product__list' => array(
      'path' => drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme',
      'template' => 'node--product--type--product--list',
    ),
    'commerce_product__product_in_cart' => array(
      'path' => drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme',
      'template' => 'commerce_product__product_in_cart',
    ),
    'views_view__collection_taxonomy_term__page_1' => array(
      'path' => drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme',
      'template' => 'views-view--collection-taxonomy-term--page-1',
      'arguments' => array('view' => NULL),
      'base hook' => 'views_view',
    ),
  );

  return $themes;
}

/**
 * Implements hook_theme_registry_alter().
 */
function commerce_kickstart_product_ui_theme_registry_alter(&$theme_registry) {
  // Remove commerce product label.
  $theme_registry['commerce_product_title']['path'] = drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme';
  $theme_registry['commerce_product_title']['template'] = 'commerce-product-title';
  // Remove cart block total label & add cart link on item.
  $theme_registry['commerce_line_item_summary']['path'] = drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme';
  $theme_registry['commerce_line_item_summary']['template'] = 'commerce-line-item-summary';
}

/**
 * Override or insert variables into the page template.
 */
function commerce_kickstart_product_ui_preprocess_page(&$vars) {
  $product_display_types = commerce_product_reference_node_types();
  if (!empty($vars['node']) && isset($product_display_types[$vars['node']->type])) {
    $vars['title'] = "";
  }
}
/**
 * Override or insert variables into the node template.
 */
function commerce_kickstart_product_ui_preprocess_node(&$vars) {
  $product_display_types = commerce_product_reference_node_types();
  if (isset($vars['type']) && isset($product_display_types[$vars['node']->type])) {
    $vars['theme_hook_suggestions'][] = 'node__product__type';
    $vars['classes_array'][] = 'node-product-type';
    if ($vars['view_mode'] == 'product_list') {
      $vars['theme_hook_suggestions'][] = 'node__product__type__product__list';
      $vars['classes_array'][] = 'node-product-type-product-list';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Link cart block items to cart.
 */
function commerce_kickstart_product_ui_preprocess_commerce_line_item_summary(&$variable) {
  $variable['cart_items'] = l($variable['quantity'], 'cart', array('attributes' => array('class' => array('line-item-quantity'))));
}

/**
 * Implements hook_library().
 */
function commerce_kickstart_product_ui_library() {
  $libraries['jquery_ui_spinner'] = array(
    'title' => 'jQuery Spinner',
    'website' => 'http://github.com/btburnett3/jquery.ui.spinner/',
    'version' => '1.8',
    'js' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.min.js' => array(),
    ),
    'css' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui.widget'),
    ),
  );
  $libraries['jquery_expander'] = array(
    'title' => 'jQuery Expander',
    'website' => 'http://plugins.learningjquery.com/expander/',
    'version' => '1.4.2',
    'js' => array(
      libraries_get_path('jquery_expander') . '/jquery.expander.min.js' => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_form_alter().
 */
function commerce_kickstart_product_ui_form_alter(&$form, &$form_state, $form_id) {
  if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {
    // Add quantity spinner widget & read more link
    $form['#attached']['library'][] = array('commerce_kickstart_product_ui', 'jquery_expander');
    $form['#attached']['library'][] = array('commerce_kickstart_product_ui', 'jquery_ui_spinner');
    $form['#attached']['js'][] = drupal_get_path('module', 'commerce_kickstart_product_ui') . '/commerce_kickstart_product_ui.js';

    // Rename add-to-cart form fields label (quantity, color, size)
    $form['quantity']['#title'] = t('Enter Quantity');
    $form['attributes']['field_color']['#title'] = t('Select Color');

    foreach(array_keys($form['attributes']) as $field_name) {
      if (strstr($field_name, 'size')) {
        $form['attributes'][$field_name]['#title'] = t('Select Size');
        break;
      }
    }
  }
  if ($form_id == 'views_exposed_form') {
    $form['search_api_views_fulltext']['#size'] = 26;
    $form['search_api_views_fulltext']['#attributes']['placeholder'] = t('Search');
  }
}

/**
 * Implements hook_page_alter().
 */
function commerce_kickstart_product_ui_page_alter(&$page) {
  // Disable breadcumb on user, checkout and cart pages.
  $current_path = current_path();
  $exclude_path = "user*\ncheckout/*\ncart";
  $match = drupal_match_path(drupal_strtolower($current_path), drupal_strtolower($exclude_path));
  if ($match) {
    drupal_set_breadcrumb(array());
  }
}

/*
 * Process variables for entity.tpl.php.
 */
function commerce_kickstart_product_ui_preprocess_entity(&$variables) {
  if ($variables['elements']['#view_mode'] == 'product_in_cart') {
    $variables['title'] = "";
    $variables['url'] = "";
    // Need to remove the clearfix class from default entity.tpl.php for IE7/8...
    $variables['theme_hook_suggestions'][] = $variables['elements']['#entity_type'] . '__' . $variables['elements']['#view_mode'];
  }
}

/**
 * Implements hook_field_attach_create_bundle().
 */
function commerce_kickstart_product_ui_field_create_instance($field) {
  $entity_info = entity_get_info($field['entity_type']);

  $field_name = $entity_info['field replacement'][$entity_info['entity keys']['label']]['field']['field_name'];

  if ($field_name != $field['field_name']) {
    return;
  }

  // Apply the h2 wrapper only for title fields.
  $instance = field_info_instance($field['entity_type'], $field_name, $field['bundle']);
  $instance['fences_wrapper'] = 'h2';
  field_update_instance($instance);
}

/**
 * Implements hook_preprocess_views_view().
 *
 * Add collection term as view header.
 */
function commerce_kickstart_product_ui_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  if ($view->name == 'collection_taxonomy_term') {
    if ($view->current_display == 'page_1') {
      $tid = $view->args['0'];
      $term = taxonomy_term_load($tid);
      $vars['collection_title'] = $term->name;
      $vars['collection_image_url'] = NULL;
      if (!empty($term->field_image) && !empty($term->field_image[LANGUAGE_NONE][0]['uri'])) {
        $vars['collection_image_url'] = file_create_url($term->field_image[LANGUAGE_NONE][0]['uri']);
      }
    }
  }
}

/**
 * Implements hook_block_info_alter().
 */
function commerce_kickstart_product_ui_block_info_alter(&$blocks, $theme, $code_blocks) {
  // Override facetapi blocks label.
  if (isset($blocks['facetapi']['bLnoZinIxE1jGb2PRK60VXpQAiOUVaBT'])) {
    $blocks['facetapi']['bLnoZinIxE1jGb2PRK60VXpQAiOUVaBT']['title'] = t('Shoe size');
  }
  if (isset($blocks['facetapi']['G1C31UEu0CE1nJNBKS8vf340Ze4SYYEt'])) {
    $blocks['facetapi']['G1C31UEu0CE1nJNBKS8vf340Ze4SYYEt']['title'] = t('Hat size');
  }
  if (isset($blocks['facetapi']['0ipnwlXipzrm39vOO6k11dGc0FQlH9sg'])) {
    $blocks['facetapi']['0ipnwlXipzrm39vOO6k11dGc0FQlH9sg']['title'] = t('Top size');
  }
  if (isset($blocks['facetapi']['y7cJ8JiPggb9kLdqx2RyReFZulrBd8Ig'])) {
    $blocks['facetapi']['y7cJ8JiPggb9kLdqx2RyReFZulrBd8Ig']['title'] = t('Bag size');
  }
}

