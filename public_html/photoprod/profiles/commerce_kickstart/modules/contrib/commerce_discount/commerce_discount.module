<?php

/**
 * @file
 * Defines the discount and discount offer entities (always managed together),
 * their bundles, and all surrounding functionality (API, UI).
 */

/**
 * Implements hook_commerce_order_presave().
 *
 * Remove any existing commerce discount line item.
 */
function commerce_discount_commerce_order_presave($order) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Remove all discount refrences from the order.
  $wrapper->commerce_discounts->set(array());

  // Remove discount components from the order total price.
  commerce_discount_remove_discount_components($wrapper->commerce_order_total);

  foreach ($wrapper->commerce_line_items as $delta => $wrapper_line_item) {
    // If the line item is a discount remove it.
    if ($wrapper_line_item->getBundle() == 'commerce_discount') {
      // Delete the line item, and remove it from the order.
      // TODO: In this case the line item should be deleted, the only problem is
      // the deletion causes the order to be saved again.
      // See commerce_line_item_delete_references().
      // $wrapper_line_item->delete();

      $wrapper->commerce_line_items->offsetUnset($delta);
    }
    // If the line item is not a discount, delete discount components from its
    // price.
    else {
      // Remove discount components from the line item unit price.
      commerce_discount_remove_discount_components($wrapper_line_item->commerce_unit_price);

      // Remove discount components from the line item total price.
      commerce_discount_remove_discount_components($wrapper_line_item->commerce_total);

      $wrapper_line_item->save();
    }
  }

  // Invoke all the rules that apply discounts to a given order after doing the
  // cleanup.
  rules_invoke_event('commerce_discount_order', $order);
}

/**
 * Implements hook_commerce_cart_order_refresh().
 */
function commerce_discount_commerce_cart_order_refresh($order_wrapper) {
  $order = $order_wrapper->value();
  rules_invoke_event('commerce_discount_order', $order);
}

/**
 * Remove discount components from a given price and recalculate the total.
 *
 * @param $price_wrapper
 *   Wrapped commerce price.
 */
function commerce_discount_remove_discount_components($price_wrapper) {
  $data = $price_wrapper->data->value();
  $component_removed = FALSE;
  // Remove price components belonging to order discounts.
  foreach ($data['components'] as $key => $component) {
    if ($component['name'] != 'discount') {
      continue;
    }
    $discount_name = $component['price']['data']['discount_name'];
    $wrapper = entity_metadata_wrapper('commerce_discount', $discount_name);
    if ($wrapper->type->value() == 'order_discount') {
      unset($data['components'][$key]);
      $component_removed = TRUE;
    }
  }
  // Don't alter the price components if no components were removed.
  if (!$component_removed) {
    return;
  }

  // Re-save the price without the discounts (if existed).
  $price_wrapper->data->set($data);

  // Re-set the total price.
  $total = commerce_price_component_total($price_wrapper->value());
  $price_wrapper->amount->set($total['amount']);
}

/**
 * Implements hook_entity_info().
 */
function commerce_discount_entity_info() {
  $items['commerce_discount'] = array(
    'label' => t('Commerce Discount'),
    'controller class' => 'CommerceDiscountControllerExportable',
    'entity class' => 'CommerceDiscount',
    'base table' => 'commerce_discount',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'discount_id',
      'name' => 'name',
      'label' => 'label',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'module' => 'commerce_discount',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'commerce_discount_access',
    'metadata controller class' => 'CommerceDiscountMetadataController',
    'views controller class' => 'CommerceDiscountViewsController',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/commerce/store/discounts',
      'file' => 'includes/commerce_discount.admin.inc',
      'controller class' => 'CommerceDiscountUIController',
    ),
  );
  foreach (commerce_discount_types() as $type => $info) {
    $items['commerce_discount']['bundles'][$type] = array(
      'label' => $info['label'],
    );
  }

  $items['commerce_discount_offer'] = array(
    'label' => t('Commerce Discount Offer'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'CommerceDiscountOffer',
    'base table' => 'commerce_discount_offer',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'discount_offer_id',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'module' => 'commerce_discount',
    'metadata controller class' => 'EntityDefaultMetadataController',
    'inline entity form' => array(
      'controller' => 'CommerceDiscountOfferInlineEntityFormController',
    ),
  );
  foreach (commerce_discount_offer_types() as $type => $info) {
    $items['commerce_discount_offer']['bundles'][$type] = array(
      'label' => $info['label'],
    );
  }

  return $items;
}

/**
 * Implements hook_modules_enabled().
 *
 * Add commerce discount offer reference field.
 *
 * @see hook_install()
 */
function commerce_discount_modules_enabled($modules) {
  foreach (commerce_discount_types() as $type => $value) {
    if (!field_read_instance('commerce_discount', 'commerce_discount_offer', $type, array('include_inactive' => TRUE))) {
      $instance = array(
        'field_name' => 'commerce_discount_offer',
        'entity_type' => 'commerce_discount',
        'bundle' => $type,
        'label' => t('Discount offer reference'),
        'required' => TRUE,
        'widget' => array(
          'module' => 'inline_entity_form',
          'type' => 'inline_entity_form',
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_permission().
 */
function commerce_discount_permission() {
  $permissions = array();
  $permissions['administer commerce discounts'] = array(
    'title' => t('Administer discounts'),
  );

  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function commerce_discount_views_api($module, $api) {
  if ($module == 'views') {
    return array(
      'version' => 3,
      'path' => drupal_get_path('module','commerce_discount') . '/includes/views',
    );
  }
}

/**
 * Implements hook_features_pipe_commerce_discount_alter().
 *
 * Pipe the related Commerce discount order entity.
 */
function commerce_discount_features_pipe_commerce_discount_alter(&$pipe, $data, $export) {
  if (empty($data)) {
    return;
  }

  foreach ($data as $name) {
    $wrapper = entity_metadata_wrapper('commerce_discount', $name);
    $pipe['commerce_discount_offer'][] = $wrapper->commerce_discount_offer->name->value();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the "Commerce discount offer" for the components list of features.
 */
function commerce_discount_form_features_export_form_alter(&$form, $from_state) {
  unset($form['export']['components']['#options']['commerce_discount_offer']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disable alteration of discounts with overriden rules.
 */
function commerce_discount_form_commerce_discount_form_alter(&$form, $form_state) {
  // Add clearfix to the discount type container.
  $form['commerce_discount_type']['#attributes']['class'][] = 'clearfix';
  $form['commerce_discount_fields']['commerce_discount_offer']['und']['form']['type']['#attributes']['class'][] = 'clearfix';

  if (empty($form['commerce_discount_fields']['#entity']->discount_id)) {
    // Entity is new.
    return;
  }

  if (!empty($form_state['triggering_element']['#ajax'])) {
    // We are inside an Ajax call.
    return;
  }

  $discount_id = $form['commerce_discount_fields']['#entity']->discount_id;
  $discount = entity_load_single('commerce_discount', $discount_id);
  $rule = rules_config_load('commerce_discount_rule_' . $discount->name);
  if ($rule->hasStatus(ENTITY_OVERRIDDEN)) {
    drupal_set_message(t('The rule associated with this discount is overriden, making it impossible to edit the discount.'), 'warning');
    $form['actions']['submit']['#disabled'] = TRUE;
  }
}


/**
 * Implements hook_commerce_discount_insert().
 *
 * Rebuild Rules configuration.
 */
function commerce_discount_commerce_discount_insert($entity) {
  entity_defaults_rebuild(array('rules_config'));
}

/**
 * Implements hook_commerce_discount_update().
 *
 * Rebuild Rules configuration.
 */
function commerce_discount_commerce_discount_update($entity) {
  entity_defaults_rebuild(array('rules_config'));
}

/**
 * Implements hook_commerce_discount_delete().
 *
 * Delete referenced commerce_discount_offer upon commerce_discount deletion.
 */
function commerce_discount_commerce_discount_delete($entity) {
  $wrapper = entity_metadata_wrapper('commerce_discount', $entity);
  // Delete the referenced commerce_discount_offer.
  if ($wrapper->commerce_discount_offer->value()) {
    entity_delete('commerce_discount_offer', $wrapper->commerce_discount_offer->getIdentifier());
  }
}

/**
 * Implements hook_menu().
 */
function commerce_discount_menu() {
  $items['admin/commerce/commerce-discounts/manage/%/enable/%'] = array(
    'page callback' => 'commerce_discount_set_enabled',
    'page arguments' => array(4, TRUE, 6),
    'access arguments' => array('administer commerce discounts'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/commerce-discounts/manage/%/disable/%'] = array(
    'page callback' => 'commerce_discount_set_enabled',
    'page arguments' => array(4, FALSE, 6),
    'access arguments' => array('administer commerce discounts'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Callback for enabling / disabling a commerce_discount.
 */
function commerce_discount_set_enabled($discount_id, $enabled, $type = 'ajax') {
  if (!$discount_id) {
    return;
  }

  $entity = entity_load_single('commerce_discount', $discount_id);
  $entity->enabled = $enabled;
  $entity->save();

  if ($type == 'ajax') {
    $html = commerce_discount_state_switch_content($enabled, $discount_id);
    $commands = array();
    $commands[] = ajax_command_html(".discount-$discount_id", $html);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    drupal_goto('admin/commerce/commerce-discounts');
  }
}

/**
 * Callback for building the enable / disable widget.
 *
 * @param $enabled
 *   Boolean specifying whether the discount is enabled.
 * @param $discount_id
 *   The discount ID.
 *
 * @return
 *   The widget HTML.
 */
function commerce_discount_state_switch_content($enabled, $discount_id) {
  $options = array(
    'attributes' => array(
      'class' => array('use-ajax'),
    ),
  );

  if ($enabled) {
    $enable = array('data' => t('Enabled'), 'class' => array('enabled'));
    $disable = l(t('Disable'), "admin/commerce/commerce-discounts/manage/$discount_id/disable/nojs", $options);
  }
  else {
    $enable = l(t('Enable'), "admin/commerce/commerce-discounts/manage/$discount_id/enable/nojs", $options);
    $disable = array('data' => t('Disabled'), 'class' => array('disabled'));
  }

  return theme('item_list', array('items' => array($enable, $disable)));
}

/**
 * Access callback for commerce_discount entities.
 */
function commerce_discount_access($op, $entity, $account, $entity_type) {
  return user_access('administer commerce discounts', $account);
}

/**
 * Implements hook_commerce_discount_type_info().
 */
function commerce_discount_commerce_discount_type_info() {
  $types = array();
  $types['order_discount'] = array(
    'label' => t('Order Discount'),
    'event' => 'commerce_discount_order',
    'entity type' => 'commerce_order',
  );
  $types['product_discount'] = array(
    'label' => t('Product Discount'),
    'event' => 'commerce_product_calculate_sell_price',
    // The line item of the product.
    'entity type' => 'commerce_line_item',
  );

  return $types;
}

/**
 * Implements hook_commerce_discount_offer_type_info().
 */
function commerce_discount_commerce_discount_offer_type_info() {
  $types = array();
  $types['fixed_amount'] = array(
    'label' => t('$ off'),
    'action' => 'commerce_discount_fixed_amount',
    'entity types' => array('commerce_order', 'commerce_line_item'),
  );

  $types['percentage'] = array(
    'label' => t('% off'),
    'action' => 'commerce_discount_percentage',
    'entity types' => array('commerce_order', 'commerce_line_item'),
  );

  return $types;
}

/**
 * Applies the passed-in fixed amount discount offer to the passed-in entity.
 */
function commerce_discount_fixed_amount_offer_apply($entity, $entity_type, CommerceDiscountOffer $discount_offer) {

}

/**
 * Applies the passed-in percentage discount offer to the passed-in entity.
 */
function commerce_discount_percentage_offer_apply($entity, $entity_type, CommerceDiscountOffer $discount_offer) {

}

/**
 * Return an array of all defined discount types.
 *
 * @return
 *   The array of types, keyed by type name.
 */
function commerce_discount_types() {
  $discount_types = &drupal_static(__FUNCTION__);

  if (!isset($discount_types)) {
    $discount_types = array();

    foreach (module_implements('commerce_discount_type_info') as $module) {
      foreach (module_invoke($module, 'commerce_discount_type_info') as $type => $info) {
        $info += array(
          // Remember the providing module.
          'module' => $module,
        );
        $discount_types[$type] = $info;
      }
    }

    // Allow the type info to be altered by other modules.
    drupal_alter('commerce_discount_type_info', $discount_types);
  }

  return $discount_types;
}

/**
 * Loads the data for a specific discount type.
 *
 * @param $discount_type
 *   The machine name of a discount type.
 *
 * @return
 *   The requested array or FALSE if not found.
 */
function commerce_discount_type($discount_type) {
  $discount_types = commerce_discount_types();

  return isset($discount_types[$discount_type]) ? $discount_types[$discount_type] : FALSE;
}

/**
 * Returns the human readable name of any or all discount types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all discount type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_discount_type_get_name($type = NULL) {
  $discount_types = commerce_discount_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($discount_types[$type])) {
      return $discount_types[$type]['label'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($discount_types as $key => $value) {
    $discount_types[$key] = $value['label'];
  }

  return $discount_types;
}

/**
 * Return an array of all defined discount offer types.
 *
 * @return
 *   The array of types, keyed by type name.
 */
function commerce_discount_offer_types() {
  $offer_types = &drupal_static(__FUNCTION__);

  if (!isset($offer_types)) {
    $offer_types = array();

    foreach (module_implements('commerce_discount_offer_type_info') as $module) {
      foreach (module_invoke($module, 'commerce_discount_offer_type_info') as $type => $info) {
        $info += array(
          // Remember the providing module.
          'module' => $module,
        );
        $offer_types[$type] = $info;
      }
    }

    // Allow the type info to be altered by other modules.
    drupal_alter('commerce_discount_offer_type_info', $offer_types);
  }

  return $offer_types;
}

/**
 * Loads the data for a specific discount offer type.
 *
 * @param $offer_type
 *   The machine name of an offer type.
 *
 * @return
 *   The requested array or FALSE if not found.
 */
function commerce_discount_offer_type($offer_type) {
  $offer_types = commerce_discount_offer_types();

  return isset($offer_types[$offer_type]) ? $offer_types[$offer_type] : FALSE;
}

/**
 * Returns the human readable name of any or all discount offer types.
 *
 * @param $type
 *   Optional parameter specifying the offer type whose name to return.
 *
 * @return
 *   Either an array of all discount offer type names keyed by the machine name
 *   or a string containing the human readable name for the specified type.
 *   If a type is specified that does not exist, this function returns FALSE.
 */
function commerce_discount_offer_type_get_name($type = NULL) {
  $offer_types = commerce_discount_offer_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($offer_types[$type])) {
      return $offer_types[$type]['label'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($offer_types as $key => $value) {
    $offer_types[$key] = $value['label'];
  }

  return $offer_types;
}

/**
 * Return an array keyed by commerce order type and label as value.
 */
function commerce_discount_entity_list() {
  $options = array();
  foreach(entity_load('commerce_discount') as $discount) {
    $options[$discount->name] = $discount->label;
  }

  return $options;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_discount_commerce_line_item_type_info() {
  return array(
    'commerce_discount' => array(
      'type' => 'commerce_discount',
      'name' => t('Fixed amount discount'),
      'description' => t('Line item for fixed amounts.'),
      'add_form_submit_value' => t('Add discount'),
      'base' => 'commerce_discount_line_item',
    ),
  );
}

/**
 * Determine the discount's line item title.
 *
 * @return
 *   The line item title.
 */
function commerce_discount_line_item_title() {
  return t('Fixed amount discount');
}

