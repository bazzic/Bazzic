<?php

/**
 * Implements hook_views_api().
 */
function photobook_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'photobook') . '/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function photobook_form_alter(&$form, $form_state, $form_id) { 
  //krumo($form);
  if ($form_id == 'views_form_photobooks_page') {
    //krumo(photobook_update_cart($form, $form_state));
    //krumo($form);
    $form['#attached']['js'][] = drupal_get_path('module', 'photobook') . '/js/photobook.js';
    
    $style_info = field_info_field('field_style');
    $style_options = $style_info['settings']['allowed_values'];
    
    $pages_info = field_info_field('field_pages_list');
    $pages_options = $pages_info['settings']['allowed_values'];
    
    $form['add_to_cart_pages'] = array(
        '#title' => t('Pages'),
        '#type' => 'select',
        '#options' => $pages_options,
        '#ajax' => array('callback' => 'photobook_update_cart'),
      );
    
    $form['add_to_cart_style'] = array(
        '#title' => t('Style'),
        '#type' => 'radios',
        '#options' => $style_options,
    );
    unset($form['actions']['submit']);
    
    foreach ($form['add_to_cart_quantity'] as $key => $element) {
      //krumo($element);
      if (is_array($element)) {
        //print_r($_GET['q']);
        $quantity = isset($_GET['quantity' . $key]) ? $_GET['quantity' . $key] : 0;
        $form['add_to_cart_quantity'][$key]['#type'] = 'select';
        $form['add_to_cart_quantity'][$key]['#options'] = array(0,1,2,3,4,5,6,7,8,9,10);
        $form['add_to_cart_quantity'][$key]['#default_value'] = $quantity;
        $form['add_to_cart_quantity'][$key]['#ajax']['callback'] = 'photobook_update_cart';
        unset($form['add_to_cart_quantity'][$key]['#size']);
      }
    }
    //krumo($form);
  }  
}

function photobook_get_newest_gallery() {
  global $user;
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('uid', $user->uid,'=')
    ->orderBy('created', 'DESC')
    ->range(0,1)
    ->execute()
    ->fetchAssoc();
  return $result['nid'];
}

function photobook_update_cart($form, &$form_state) {
    global $user;
    //krumo($form);

    $field_name = 'add_to_cart_quantity';
    $product_quantities = array();
    foreach (element_children($form[$field_name]) as $row_id) {
      // Don't add products that have quantity 0.
      $quantity = $form_state['values'][$field_name][$row_id];
      if ($quantity > 0) {
        $product_id = $form[$field_name][$row_id]['#product_id'];
        $product_quantities[$product_id] = $quantity;
      }
    }

    $products = commerce_product_load_multiple(array_keys($product_quantities));

    $style_value = $form_state['values']['add_to_cart_style'];
    $pages_value = $form_state['values']['add_to_cart_pages'];
    
    $order = commerce_cart_order_load($user->uid);
    if ($order) {
      commerce_cart_order_empty($order);
    }
    
    $product_amounts = array();
    foreach ($products as $product_id => $product) {
      $product_amounts[] = $product->commerce_price['und'][0]['amount'];
    }
    
    $highest_price_set = FALSE;
    foreach ($products as $product_id => $product) {
      $combine = 1;
      $quantity = $product_quantities[$product_id];
      
      if (max($product_amounts) == $product->commerce_price['und'][0]['amount'] && !$highest_price_set) {
        // This product will not receive a discount.
        $line_item = commerce_product_line_item_new($product, 1);
        $line_item->field_highest_price['und'][] = array('value' => 1);
        $highest_price_set = TRUE;
        $combine = 0;
        photobooks_add_line_item($line_item, $combine, $style_value, $pages_value);
        if ($quantity > 1) {
          // Reset the products that will take the discount to the products array.
          $quantity = $quantity - 1;
          $line_item = commerce_product_line_item_new($product, $quantity);
          photobooks_add_line_item($line_item, $combine, $style_value, $pages_value);
        } 
      } else {
        $line_item = commerce_product_line_item_new($product, $quantity);
        photobooks_add_line_item($line_item, $combine, $style_value, $pages_value);
      }
      
      
    }
    $view = views_get_view('shopping_cart');
    $order_summary = $view->preview();
    $commands = array();
    $commands[] = ajax_command_replace('.view-shopping-cart', $order_summary);

    return array('#type' => 'ajax', '#commands' => $commands);
  }

function photobooks_add_line_item($line_item, $combine, $style_value, $pages_value) {
  global $user;
  $line_item->data['context']['product_ids'] = array($product_id);
  $line_item->data['context']['add_to_cart_combine'] = $combine;
  $line_item->field_style['und'][] = array('value' => $style_value);
  $line_item->field_pages_list['und'][] = array('value' => $pages_value);
  rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
  commerce_cart_product_add($user->uid, $line_item, $combine);
}




