<?php

/**
 * Implements hook_views_api().
 */
function photobook_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'photobook') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function photobook_menu() {
  $items = array();

  $items['order-photobooks'] = array(
    'title' => 'Order your photobooks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('photobook_order_form'),
    'access callback' => 'user_access',
    'access arguments' => array('View own orders of any type'),
    'description' => 'Create new photobook order',
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

function photobook_order_form($form, $form_state) {
  
//krumo($form_state);
  
  $product_name_results = photobook_get_product_names();
  $product_titles = array();
  foreach ($product_name_results as $record) {
    $product_titles[$record->product_id] = $record->title;
  }
  
  $form['add_to_cart_quantity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Photobooks'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<table><tr>',
    '#suffix' => '</tr></table>',
  );
  
  foreach ($product_titles as $product_id => $title) {
    $form['add_to_cart_quantity']['add_to_cart_quantity' . $product_id] = array(
      '#product_id' => $product_id,
      '#title' => $title,
      '#type' => 'select',
      '#options' => array(0,1,2,3,4,5,6,7,8,9,10), 
      '#ajax' => array('callback' => 'photobook_update_cart'),
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      //'#default_value' => $form_state['values']['add_to_cart_quantity' . $product_id],
    );
  }

  $form['#attached']['js'][] = drupal_get_path('module', 'photobook') . '/js/photobook.js';
    
  $style_info = field_info_field('field_style');
  $style_options = $style_info['settings']['allowed_values'];
    
  $pages_info = field_info_field('field_pages_list');
  $pages_options = $pages_info['settings']['allowed_values'];
    
  $form['add_to_cart_pages'] = array(
      '#title' => t('Pages'),
      '#type' => 'select',
      '#options' => $pages_options,
      '#ajax' => array('callback' => 'photobook_update_cart'),
    );
    
  $form['add_to_cart_style'] = array(
      '#title' => t('Style'),
      '#type' => 'radios',
      '#options' => $style_options,
  );
  
  $nid = photobook_get_newest_gallery();
  
  $form['photos'] = array(
    '#markup' => '
        <div><a class="colorbox-load" href="node/add/media-gallery?width=900&height=600&iframe=true">Add Gallery</a></div>
        <div><a class="colorbox-load" href="node/' . $nid . '?width=900&height=600&iframe=true">Arrange your photos</a></div>
    ',
  );
  
  $form['photos_help'] = array(
    '#markup' => '
      <ul>
        <li>Please choose which photos you would like in your Photobook.</li>
        <li class="image-numbers">You have chosen 10 pages, so you can have between 12 and 62 photos.</li>
        <li>This is also your last chance to add photos to your order.</li>
      </ul>',
  );
  
  
   $form['submit'] = array(
      '#value' => t('Submit'),
      '#type' => 'submit',
  );
  
  return $form;
  
}

function photobook_order_form_validate($form, &$form_state) {
  if ($form_state['triggering_element']['#type'] == 'submit') {
    $nid = photobook_get_newest_gallery();
    $pages = (int)$form_state['values']['add_to_cart_pages'];
    $gallery = node_load($nid);
    $num_gallery_images = count($gallery->media_gallery_media['und']);
    $min = $pages + 2;
    $max = $pages * 6 + 2;
    
    if ($num_gallery_images < $min) {
      form_set_error('min_error', 'You have less than ' . $min . ' images.');
    }
    
    if ($num_gallery_images > $max) {
      form_set_error('max_error', 'You have more than ' . $max . ' images.');
    }
    
    //form_set_error('error', krumo($form_state['triggering_element']));
  }
}

function photobook_order_form_submit($form, &$form_state) {
  //krumo($form_state);
}

/**
 * Implements hook_form_alter().
 */
function photobook_form_alter(&$form, $form_state, $form_id) { 
  //krumo($form);
}

function photobook_get_newest_gallery() {
  global $user;
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('uid', $user->uid,'=')
    ->condition('type', 'media_gallery','=')
    ->orderBy('created', 'DESC')
    ->range(0,1)
    ->execute()
    ->fetchAssoc();
  return $result['nid'];
}

function photobook_get_product_names() {
  $query = db_select('commerce_product', 'c');
  $query->join('field_data_commerce_price', 'f', 'c.product_id = f.entity_id');
  $query
    ->fields('c', array('title', 'product_id'))
    ->condition('c.type', 'photobook','=')
    ->orderBy('f.commerce_price_amount', 'ASC');
  $results = $query->execute();
  return $results;
}

function photobook_update_cart($form, &$form_state) {
    global $user;

    $field_name = 'add_to_cart_quantity';
    $product_quantities = array();
    foreach ($form[$field_name] as $row_id => $element) {
      // Don't add products that have quantity 0.
      $quantity = $form_state['values'][$row_id];
      if ($quantity > 0) {
        $product_id = $form[$field_name][$row_id]['#product_id'];
        $product_quantities[$product_id] = $quantity;
      }
    }

    $products = commerce_product_load_multiple(array_keys($product_quantities));

    $style_value = $form_state['values']['add_to_cart_style'];
    $pages_value = $form_state['values']['add_to_cart_pages'];
    
    $order = commerce_cart_order_load($user->uid);
    if ($order) {
      commerce_cart_order_empty($order);
    }
    
    $product_amounts = array();
    foreach ($products as $product_id => $product) {
      $product_amounts[] = $product->commerce_price['und'][0]['amount'];
    }
    
    $highest_price_set = FALSE;
    foreach ($products as $product_id => $product) {
      $combine = 1;
      $quantity = $product_quantities[$product_id];
      
      if (max($product_amounts) == $product->commerce_price['und'][0]['amount'] && !$highest_price_set) {
        // This product will not receive a discount.
        $line_item = commerce_product_line_item_new($product, 1);
        $line_item->field_highest_price['und'][] = array('value' => 1);
        $highest_price_set = TRUE;
        $combine = 0;
        photobooks_add_line_item($line_item, $combine, $style_value, $pages_value);
        if ($quantity > 1) {
          // Reset the products that will take the discount to the products array.
          $quantity = $quantity - 1;
          $line_item = commerce_product_line_item_new($product, $quantity);
          photobooks_add_line_item($line_item, $combine, $style_value, $pages_value);
        } 
      } else {
        $line_item = commerce_product_line_item_new($product, $quantity);
        photobooks_add_line_item($line_item, $combine, $style_value, $pages_value);
      }
      
      
    }
    $view = views_get_view('shopping_cart');
    $order_summary = $view->preview();
    $commands = array();
    $commands[] = ajax_command_replace('.view-shopping-cart', $order_summary);

    return array('#type' => 'ajax', '#commands' => $commands);
  }

function photobooks_add_line_item($line_item, $combine, $style_value, $pages_value) {
  global $user;
  $line_item->data['context']['product_ids'] = array($product_id);
  $line_item->data['context']['add_to_cart_combine'] = $combine;
  $line_item->field_style['und'][] = array('value' => $style_value);
  $line_item->field_pages_list['und'][] = array('value' => $pages_value);
  rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
  commerce_cart_product_add($user->uid, $line_item, $combine);
}




