<?php

/**
 * Implements hook_commerce_order_status_info_alter().
 */
function photobook_commerce_order_status_info_alter(&$order_statuses) {
  $order_statuses['canceled'] = array(
    'name' => 'canceled',
    'title' => t('Canceled'),
    'state' => 'canceled',
  );

  $order_statuses['new'] = array(
    'name' => 'new',
    'title' => t('New order'),
    'state' => 'pending',
    'weight' => 3,
  );
  $order_statuses['pending'] = array(
    'name' => 'pending',
    'title' => t('Order in process'),
    'state' => 'pending',
    'weight' => 4,
  );
  $order_statuses['processing'] = array(
    'name' => 'processing',
    'title' => t('Reading to Print'),
    'state' => 'pending',
    'weight' => 5,
  );
  $order_statuses['printing'] = array(
    'name' => 'printing',
    'title' => t('Print in process'),
    'state' => 'pending',
    'weight' => 6,
  );

  $order_statuses['completed'] = array(
    'name' => 'completed',
    'title' => t('Completed'),
    'state' => 'completed',
  );

  return $order_statuses;
}

/**
 * Implements hook_views_api().
 */
function photobook_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'photobook') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function photobook_menu() {
  $items = array();

  $items['order-photobooks'] = array(
    'title' => 'Order your photobooks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('photobook_order_form'),
    'access callback' => TRUE,
    'description' => 'Create new photobook order',
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Implements hook_user_view().
 */
function photobook_user_view($account, $view_mode, $langcode) {
  $account->content['folders'] =  array(
    '#type' => 'user_profile_category',
    '#title' => t('My folders'),
    '#markup' => '',
    '#attributes' => array('class' => array('user-folders', 'clearfix')),
  );
  
  $account->content['folders']['view'] = array(
    '#type' => 'user_profile_item',
    '#title' => '',
    '#markup' => views_embed_view('my_folders', 'default', $account->uid),
    '#attributes' => array('class' => array('my-folders')),
  );
}

/*
 * This is the main order form.
 */
function photobook_order_form($form, $form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'photobook') . '/js/photobook.js';
  $nid = arg(1);
  $form['gallery_nid'] = array(
      '#type' => 'hidden',
      '#default_value' => $nid,
  );
  
  
  // SUPPLY OWN DESIGN
  $form['add_to_cart_design'] = array(
      '#title' => t('Supply own design'),
      '#type' => 'checkbox',
      '#ajax' => array('callback' => 'photobook_update_cart_ajax'),
  );
  
  // 1) ORIENTATION
  $orientation_info = field_info_field('field_orientation');
  $orientation_options = $orientation_info['settings']['allowed_values'];
  
  $form['orientation_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose the orientation of your photobook(s)'),
    '#description' => t('This refers to the Photobook itself. Your Photos will always be laid out the correct way up.
(Images below represent a closed Photobook)'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['orientation_fieldset']['add_to_cart_orientation'] = array(
      //'#title' => t('Style'),
      '#type' => 'radios',
      '#options' => $orientation_options,
  );
  
  // 2) PHOTOBOOKS
  $product_name_results = photobook_get_product_names();
  $product_titles = array();
  foreach ($product_name_results as $record) {
    $product_titles[$record->product_id] = $record->title;
  }
  
  $form['add_to_cart_quantity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose your Photobook(s)'),
    '#description' => t(''),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['add_to_cart_quantity']['open_table'] = array(
    '#markup' => '<table><tr>',
  );
  
  foreach ($product_titles as $product_id => $title) {
    $form['add_to_cart_quantity'][] = array(
      '#product_id' => $product_id,
      '#title' => $title,
      '#type' => 'select',
      '#options' => array(0,1,2,3,4,5,6,7,8,9,10), 
      '#ajax' => array('callback' => 'photobook_update_cart_ajax'),
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      //'#default_value' => $form_state['values']['add_to_cart_quantity' . $product_id],
    );
  }
  
  $form['add_to_cart_quantity']['close_table'] = array(
    '#markup' => '</tr></table>',
  );

  // 3) STYLE
  $style_info = field_info_field('field_style');
  $style_options = $style_info['settings']['allowed_values'];
  
  $form['style_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose design style'),
    '#description' => t('Our designers will create a bespoke layout using your photographs and one of the following styles.
Click images for pop-up examples of each style.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['style_fieldset']['add_to_cart_style'] = array(
      '#title' => t(''),
      '#type' => 'radios',
      '#options' => $style_options,
  );
  
  // 4) PAGES
  $pages_info = field_info_field('field_pages_list');
  $pages_options = $pages_info['settings']['allowed_values'];
  
  $form['pages_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose number of pages:'),
    '#description' => t(''),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['pages_fieldset']['add_to_cart_pages'] = array(
    '#title' => t(''),
    '#type' => 'select',
    '#options' => $pages_options,
    '#default_value' => 10,
    '#ajax' => array('callback' => 'photobook_update_cart_ajax'),
  );
  
  // 5) SELECT PHOTOS
  $user_galleries_results = photobook_get_user_galleries();
  foreach($user_galleries_results as $user_galleries_record) {
    $gallery_options[$user_galleries_record->nid] = $user_galleries_record->title;
  }
  
  $form['gallery_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select photos'),
    '#description' => t(''),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['gallery_fieldset']['add_to_cart_gallery'] = array(
      '#title' => t(''),
      '#type' => 'select',
      '#options' => $gallery_options,
      '#default_value' => $nid,
    );
  
  $form['gallery_fieldset']['photos'] = array(
    '#markup' => '
        <div><a class="colorbox-load" href="/node/' . $nid . '?width=900&height=600&iframe=true&pages=10">Arrange your photos</a></div>
    ',
  );
  
  $form['gallery_fieldset']['photos_help'] = array(
    '#markup' => '
      <ul>
        <li>Please choose which photos you would like in your Photobook.</li>
        <li class="image-numbers">You have chosen 10 pages, so you can have between 12 and 62 photos.</li>
        <li>This is also your last chance to add photos to your order.</li>
      </ul>',
  );
  
  // 6) PERSONALISATION
  $typeface_info = field_info_field('field_typeface');
  $typeface_options = $typeface_info['settings']['allowed_values'];
  
  $title_loc_info = field_info_field('field_title_location');
  $title_loc_options = $title_loc_info['settings']['allowed_values'];
  
  $form['personalisation_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Personalisation'),
    '#description' => t(''),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['personalisation_fieldset']['add_to_cart_no_title'] = array(
      '#title' => t('I do not wish to have a title'),
      '#type' => 'checkbox',
      '#ajax' => array('callback' => 'photobook_hide_title_fields'),
  );
  
  $form['personalisation_fieldset']['add_to_cart_photobook_title'] = array(
      '#title' => t(''),
      '#type' => 'textfield',
      '#size' => 80,
      '#default_value' => 'Enter a title to be printed on the photobook',
      '#attributes' => array( 
        'onfocus' => 'inputFocus(this)',
        'onblur' => 'inputBlur(this)', 
      ),
      '#prefix' => '<span id="title_section">',
  );
  
  $form['personalisation_fieldset']['add_to_cart_typeface'] = array(
      '#title' => t(''),
      '#type' => 'radios',
      '#options' => $typeface_options,
  );
  
  $form['personalisation_fieldset']['add_to_cart_title_location'] = array(
      '#title' => t('Choose location for the title:'),
      '#type' => 'radios',
      '#options' => $title_loc_options,
      '#suffix' => '</span>',
  );
  
  $form['personalisation_fieldset']['add_to_cart_logo'] = array(
    '#name' => 'Logo',
    '#type' => 'media',
    '#title' => t('Add my logo:'),
    '#size' => 22,
  );
  
  $form['personalisation_fieldset']['add_to_cart_no_calibration'] = array(
    '#title' => t('Tick if you <u>do not</u> want free photo calibration / colour correction.'),
    '#type' => 'checkbox',
  );
  
  $form['personalisation_fieldset']['add_to_cart_no_black_and_white'] = array(
    '#title' => t('Do not change colour photos to black and white (our designers may change some photos to b/w for a more artistic feel).'),
    '#type' => 'checkbox',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Checkout',
    //'#ajax' => array('callback' => 'photobook_update_cart_submit'),
    
  );
  
  
  return $form;
  
}

/*
 * Validate the number of images in the media gallery.
 */
function photobook_update_cart_validate($form, &$form_state) {
  $commands = array();
  $nid = $form_state['values']['gallery_nid'];
  $pages = (int)$form_state['values']['add_to_cart_pages'];
  //$commands[] = ajax_command_alert($pages);
  $gallery = node_load($nid);
  $num_gallery_images = count($gallery->media_gallery_media['und']);
  $min = $pages + 2;
  $max = $pages * 6 + 2;
  //$commands[] = ajax_command_alert($num_gallery_images);
  //$commands[] = ajax_command_alert($nid);
    
  if ($num_gallery_images < $min) {
    $commands[] = ajax_command_alert('You have less than ' . $min . ' images.');
  }
    
  if ($num_gallery_images > $max) {
    $commands[] = ajax_command_alert('You have more than ' . $max . ' images.');
  }
  return $commands;
}

function photobook_order_form_submit($form, &$form_state) {
  //krumo($form_state);
  photobook_update_cart_submit($form, $form_state);
  drupal_goto('/cart');
}

/**
 * The final update of the order before going to the checkout page.
 */
function photobook_update_cart_submit($form, &$form_state) {
  global $user;
  $commands = photobook_update_cart_validate($form, $form_state);
  
  $field_name = 'add_to_cart_quantity';
  $product_quantities = array();
  foreach ($form[$field_name] as $row_id => $element) {
    // Don't add products that have quantity 0.
    $quantity = is_numeric($row_id) ? $form_state['values'][$row_id] : 0;
    if ($quantity > 0) {
      $product_id = $form[$field_name][$row_id]['#product_id'];
      $product_quantities[$product_id] = $quantity;
    }
  }

  $products = commerce_product_load_multiple(array_keys($product_quantities));
  
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    commerce_cart_order_empty($order);
  }
  
  $order->field_supply_own_design['und'][] = array('value' => $form_state['values']['add_to_cart_design']);
  $order->field_orientation['und'][] = array('value' => $form_state['values']['add_to_cart_orientation']);
  $order->field_style['und'][] = array('value' => $form_state['values']['add_to_cart_style']);
  $order->field_pages_list['und'][] = array('value' => $form_state['values']['add_to_cart_pages']);
  $order->field_gallery_node['und'][] = array('target_id' => $form_state['values']['add_to_cart_gallery']);
  $order->field_no_title['und'][] = array('value' => $form_state['values']['add_to_cart_no_title']);
  $order->field_typeface['und'][] = array('value' => $form_state['values']['add_to_cart_typeface']);
  $order->field_title_location['und'][] = array('value' => $form_state['values']['add_to_cart_title_location']);
  if ($form_state['values']['fid']) {
    $order->field_my_logo['und'][] = array('fid' => $form_state['values']['fid']);
  }
  $order->field_no_calibration['und'][] = array('value' => $form_state['values']['add_to_cart_no_calibration']);
  $order->field_no_black_and_white['und'][] = array('value' => $form_state['values']['add_to_cart_no_black_and_white']);
  
  $product_amounts = array();
  foreach ($products as $product_id => $product) {
    $product_amounts[] = $product->commerce_price['und'][0]['amount'];
  }
  
  $highest_price_set = FALSE;
  foreach ($products as $product_id => $product) {
    $combine = 1;
    $quantity = $product_quantities[$product_id];
    
    // Check to see if this is the highest priced product.  If so, don't give a discount.  If there are multiple
    // products at this price, split the non-discounted product into a separate line item so the remaining products
    // can get the discount.
    if (max($product_amounts) == $product->commerce_price['und'][0]['amount'] && !$highest_price_set) {
      // This product will not receive a discount.
      $line_item = commerce_product_line_item_new($product, 1);
      $line_item->field_highest_price['und'][] = array('value' => 1);
      $highest_price_set = TRUE;
      $combine = 0;
      photobooks_add_line_item($line_item, $combine, $form_state['values']);
      if ($quantity > 1) {
        // Reset the products that will take the discount to the products array.
        $quantity = $quantity - 1;
        $line_item = commerce_product_line_item_new($product, $quantity);
        photobooks_add_line_item($line_item, $combine, $form_state['values']);
      } 
    } else {
      $line_item = commerce_product_line_item_new($product, $quantity);
      photobooks_add_line_item($line_item, $combine, $form_state['values']);
    }
  }
  //krumo('goto');
  //drupal_goto('/cart');
}

/**
 * Ajax callback to hide title fields when user click on the No Title checkbox.
 */
function photobook_hide_title_fields($form, &$form_state) {
  if ($form_state['values']['add_to_cart_no_title'] == TRUE) {
    $commands[] = ajax_command_invoke('#title_section', 'hide');
  } else {
    $commands[] = ajax_command_invoke('#title_section', 'show');
  }
}

/**
 * Ajax callback used whenever data is selected/changed on the order screen.
 */
function photobook_update_cart_ajax($form, &$form_state) {
  global $user;
  $commands = array();
  
  if ($form_state['values']['add_to_cart_design'] == TRUE) {
    $commands[] = ajax_command_invoke('#edit-personalisation-fieldset', 'hide');
  } else {
    $commands[] = ajax_command_invoke('#edit-personalisation-fieldset', 'show');
  }
  
  $field_name = 'add_to_cart_quantity';
  $product_quantities = array();
  foreach ($form[$field_name] as $row_id => $element) {
    // Don't add products that have quantity 0.
    //krumo($row_id);exit;
    $quantity = is_numeric($row_id) ? $form_state['values'][$row_id] : 0;
    if ($quantity > 0) {
      $product_id = $form[$field_name][$row_id]['#product_id'];
      $product_quantities[$product_id] = $quantity;
    }
  }

  $products = commerce_product_load_multiple(array_keys($product_quantities));
  
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    commerce_cart_order_empty($order);
  }
  
  $product_amounts = array();
  foreach ($products as $product_id => $product) {
    $product_amounts[] = $product->commerce_price['und'][0]['amount'];
  }
  
  $highest_price_set = FALSE;
  foreach ($products as $product_id => $product) {
    $combine = 1;
    $quantity = $product_quantities[$product_id];
    
    // Check to see if this is the highest priced product.  If so, don't give a discount.  If there are multiple
    // products at this price, split the non-discounted product into a separate line item so the remaining products
    // can get the discount.
    if (max($product_amounts) == $product->commerce_price['und'][0]['amount'] && !$highest_price_set) {
      // This product will not receive a discount.
      $line_item = commerce_product_line_item_new($product, 1);
      $line_item->field_highest_price['und'][] = array('value' => 1);
      $highest_price_set = TRUE;
      $combine = 0;
      photobooks_add_line_item($line_item, $combine, $form_state['values']);
      if ($quantity > 1) {
        // Reset the products that will take the discount to the products array.
        $quantity = $quantity - 1;
        $line_item = commerce_product_line_item_new($product, $quantity);
        photobooks_add_line_item($line_item, $combine, $form_state['values']);
      } 
    } else {
      $line_item = commerce_product_line_item_new($product, $quantity);
      photobooks_add_line_item($line_item, $combine, $form_state['values']);
    }
  }
  $view = views_get_view('shopping_cart');
  $order_summary = $view->preview();
  //$commands[] = ajax_command_alert($form_state['values']['add_to_cart_gallery']);
  $commands[] = ajax_command_replace('.view-shopping-cart', $order_summary);
  $commands[] = ajax_command_invoke('.colorbox-load', 'attr', array('href', '/node/' . $form_state['values']['add_to_cart_gallery'] . '?width=900&height=600&iframe=true&pages=' . $form_state['values']['add_to_cart_pages']));
  
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Helper function used by Ajax callback to add individual line items to an order.
 */
function photobooks_add_line_item($line_item, $combine, $values) {
  global $user;
  //$line_item->data['context']['product_ids'] = array($product_id);
  $line_item->data['context']['add_to_cart_combine'] = $combine;
  $line_item->field_supply_own_design['und'][] = array('value' => $values['add_to_cart_design']);
  $line_item->field_pages_list['und'][] = array('value' => $values['add_to_cart_pages']);
  rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
  commerce_cart_product_add($user->uid, $line_item, $combine);
}

/*
 * This form add the size dropdown under each image on the media gallery page.
 */
function photobook_gallery_size_form($form, &$form_state, $fid, $nid) {
  global $user;
  $pages = isset($_GET['pages']) ? $_GET['pages'] : 0;
  
  $image_size_info = field_info_field('field_image_size');
  $options = array('- None -');
  $options += $image_size_info['settings']['allowed_values'];
  if (in_array('authenticated user', $user->roles) && !in_array('photographer', $user->roles) && !in_array('administrator', $user->roles)) {
    unset($options['Small']);
  }
  
  $file = file_load($fid);
  
  $form['pages'] = array(
    '#type' => 'hidden',
    '#value' => $pages,
  );
  
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  
  $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $fid,
  );
  
  $form['size-' . $fid] = array(
    '#type' => 'select',
    '#options' => $options, 
    '#default_value' => $file->field_image_size ? $file->field_image_size['und'][0]['value'] : 0,
    '#ajax' => array('callback' => 'photobook_gallery_update_image_size'),
  );
    
  return $form;
}

/*
 * Implements hook_form_FORM_ID_alter().
 * We only want authenticated users to be able to edit the title of the media gallery and that's all.
 */
function photobook_form_media_gallery_node_form_alter(&$form, &$form_state) {
  global $user;
  if ($user->uid != 1) {
    unset($form['additional_settings']);
    unset($form['settings_wrapper']);
    unset($form['block']);
  }
}

/**
 * Implements hook_form_alter().
 */
function photobook_form_alter(&$form, $form_state, $form_id) { 
  //krumo($form);exit;
}

/**
 * Implements hook_module_implements_alter().
 * We have to do this to push the photobook module after media_gallery in the execution order.  Otherwise, we can't alter the media_gallery node form.
 */
function photobook_module_implements_alter(&$implementations, $hook) {
  if (isset($implementations['photobook'])) {
    $group = $implementations['photobook'];
    unset($implementations['photobook']);
    $implementations['photobook'] = $group;
  }
}

/*function photobook_get_newest_gallery() {
  global $user;
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('uid', $user->uid,'=')
    ->condition('type', 'media_gallery','=')
    ->orderBy('created', 'DESC')
    ->range(0,1)
    ->execute()
    ->fetchAssoc();
  return $result['nid'];
}*/

function photobook_get_user_galleries() {
  global $user;
  $results = db_select('node', 'n')
    ->fields('n', array('title', 'nid'))
    ->condition('uid', $user->uid,'=')
    ->condition('type', 'media_gallery','=')
    ->orderBy('title', 'ASC')
    ->execute();
  return $results;
}

/**
 * Helper function to get the product names for the order form.
 */
function photobook_get_product_names() {
  $query = db_select('commerce_product', 'c');
  $query->join('field_data_commerce_price', 'f', 'c.product_id = f.entity_id');
  $query
    ->fields('c', array('title', 'product_id'))
    ->condition('c.type', 'photobook','=')
    ->orderBy('f.commerce_price_amount', 'ASC');
  $results = $query->execute();
  return $results;
}

/**
 * Ajax callback used when a user update an image's size in the gallery.
 */
function photobook_gallery_update_image_size($form, &$form_state) {
  //return array('#type' => 'ajax', '#commands' => array(ajax_command_alert(print_r($form_state['values']))));
  $fid_value = $form_state['values']['fid'];
  $size_value = $form_state['values']['size-' . $fid_value];
  $nid_value = $form_state['values']['nid'];
  if ((photobook_count_gallery_image_sizes('Large', $nid_value) >= $form_state['values']['pages']) && $size_value == 'Large') {
    $current_size = photobook_get_current_size($fid_value)->size;
    $commands = array();
    //$commands[] = ajax_command_invoke("select[name='size-" . $form_state['values']['fid'] . "'] option[value='" . $current_size . "']", 'attr', array('selected', 'selected'));
    $commands[] = ajax_command_alert('You have too many images set to Large');
    //$commands[] = ajax_command_alert((int)photobook_count_gallery_image_sizes('Large', $form_state['values']['nid']));
    //$commands[] = ajax_command_alert((int)$form_state['values']['pages']);
    //$commands[] = ajax_command_invoke('#colorbox iframe', 'attr', array('src', 'node'));
    //$commands[] = ajax_command_data('#edit-size-' . $form_state['values']['fid'], 'form_state_value_select', $size_id);
    
    //$commands[] = ajax_command_alert((int)photobook_count_gallery_image_sizes('Large', $form_state['values']['nid']));
    return array('#type' => 'ajax', '#commands' => $commands);
  } else {
    $file = file_load($fid_value);
    $file->field_image_size['und'][0]['value'] = $size_value;
    file_save($file);
  }
}

/**
 * Helper function to see how many images are set to a certain size in a gallery.
 */
function photobook_count_gallery_image_sizes($size, $nid) {
  global $user;
  $query = db_select('field_data_media_gallery_media', 'media');
  $query->join('field_data_field_image_size', 'size', 'media.media_gallery_media_fid = size.entity_id');
  $query
    ->fields('size', array('field_image_size_value'))
    ->condition('media.entity_id', $nid,'=')
    ->condition('size.field_image_size_value', $size,'=');
  $results = $query->execute();
  $count = $results->rowCount();
  return $count;
}

/**
 * Helper function to get the current size of an image if we need to switch it back after validation.  Currently not used.
 */
function photobook_get_current_size($fid) {
  $query = db_select('field_data_field_image_size', 'size');
  $query
    ->fields('size', array('field_image_size_value'))
    ->condition('size.entity_id', $fid,'=');
  $results = $query->execute();
  return $results;
}




